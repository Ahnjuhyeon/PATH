// 1. 상태의 추가, 조회, 갱신, 삭제하기 문제입니다.
// 목표: 나는 상태의 변경을 자유롭게 할 수 있다.

// const user = { // 추가할 객체
// 	name: "김성용",
// 	nickName: "zl존성용123",
// 	age: 20
// }

export const users = [
  // 조회할 배열
  {
    id: 1,
    name: "김성용",
    nickName: "zl존성용123",
    age: 20,
  },
  {
    id: 2,
    name: "신짱구",
    nickName: "나는야신짱구",
    age: 20,
  },
  {
    id: 3,
    name: "신짱아",
    nickName: "짱구여동생",
    age: 20,
  },
];

/*
q1. users 배열을 순회하여 jsx element인 요소의 길이만큼 <OneUser/>를 반환하세요 => map
		OneUser에는 name과 nickname, age가 보여지며 삭제 버튼이 필요합니다. 
[
1. 컴포넌트 만들기
2. 조회하기 
3. 삭제 버튼 만들기 
]
q2. nickName과 age는 입력 받은 값이며 id는 랜덤한 숫자입니다.  => math.random
	이를 이용하여 새로운 user 객체를 jsx element의 상단에 노출되도록 추가해보세요 => 추가 

[값은 가져와지고 이제 추가를 누르면 기존의 값을 복사하고 그뒤에 추가할 객체를 붙여..]

q3. 각 <OneUser/>의 삭제 버튼을 클릭하면 users의 선택 유저가 삭제됩니다. => 삭제 
[
  삭제버튼을 클릭하면 
  1. 내가 가지고 온 id값과 기존의 id 값이 같다면 필터를 사용해서 걸러주기 
  2. 
]
q4. 수정해보기
[
  1. 기존의 데이터를 복사하고 복사한 데이터의 id와 내가 가지고온 id를 비교하기 
  2. 수정한 데이터를 바꿀 상태에 랜더 해주기 
]

2-2. <OneUser/>의 삭제버튼이 아니고 수정 버튼이 추가되었습니다. 
     수정 버튼이 눌러지면 nickName을 수정할 수 있는 input으로 변경됩니다.
     [
      클릭하면.. 인풋창으로 바뀐다 
      1. 상태가 바뀌어야한다 
      2. 태그에 접근할 수 있는 ref랑 상태를 바꾸기 위한 state 하나씩 만들기 
      3. 클릭을 했을때  isEditbox true가 아니라면(초기값 false) setIsEditbox(true)를 반환해라
      4. isEditbox true 이면 태그에서 원래 div였던게 input으로 보이고 상태가 바뀜
      5. 태그에 접근할 수 있는 ref를 넣어줌 
      6. 수정을 위해 원본 배열을 복사해주고
      7. 복사한 배열에서 순회하면서 내가 가지고온 객체의 값이랑 비교
      8. 내가 가지고온 객체에서 닉네임 값을, 내가 바꾼 닉네임 값으로 바꾸고 
      9. 상태를 내용 바꾼 객체로 실행 
      10. 다시 현재의true 상태를 false로 바꿔줌으로써 div로 돌려놓기
     ]

		* 이때, 수정 중인 OneUser만 re-render가 이루어져야하며  
			다른 OneUser는 render되면 안됩니다. => 그게 useRef !?

		nickName을 수정할 수 있도록 하는 수정에 관한 상태는 어떻게 관리 되어야할까요?
    에?...?
    잠시만요 좀만 더 생각해볼게요 

		직접 구현해보고 해당 state를 그렇게 구현한 이유에 대하여 설명해보세요
    
    const [isEditbox, setIsEditbox] = useState(false); 이게 해당 state인디..
    일단은 해당 태그(div)에서 클릭하면 input으로 상태를 바꿔주고 싶어서 사용했고 
    현재 상태에서 왔다갔다 바뀌어야해서 t/f로 했습니다.
    또한 변경된 상태를 업데이트 하기 위해사도 state가 적합하다 생각했습니다..?


    indexQ2랑 oneUser 
*/
