import ExampleA from "./example/exampleA";
import ExampleB from "./example/exampleB";

/*
3. 전역 상태 관리를 위한 문제입니다
목표: 판단하기

전역 상태의 가장 중요한 것은 어떠한 라이브러리와 도구를 사용하는 것이 아닌
과연 전역 상태 관리가 필요한 시점이 언제이며, 나는 이때 이를 구현할 수 있을가 입니다.

아래의 상황을 생각하고 예시를 직접 구현하여 AS_IS와 TO_BE를 비교해보세요
[ 깨알상식인가

AS-IS (어즈 이즈):
현재의 상태나 현행 시스템을 나타냅니다.
어떤 프로세스, 시스템, 또는 상황이 현재 어떻게 동작하고 있는지를 설명합니다.
기존의 비즈니스 프로세스나 시스템을 이해하고 문제점을 파악하는 데 사용됩니다.


TO-BE (투비):
향후 상태나 개선된 시스템을 나타냅니다.
현재의 상태에서 개선하거나 변경할 것으로 계획하고 있는 내용을 나타냅니다.
AS-IS 상태에서 발견된 문제점을 해결하거나 효율적인 프로세스를 설계하는 등의 목적으로 사용됩니다.

]

(전역 상태를 위한 도구는 useContext, recoil, redux 아무거나 사용해도 좋아요)

(1) 부모가 알아야하는 상태가 아닐 때 <=> 
안좋은 예시는 
부모 몰라도 되는 걸 ? 근데 일단 프롭스 드릴링로 보여주는 예시 

좋은 예시는? 
리코일로할거고
부모에선 사용안하고 나른 컴포넌트에서만 사용하는 예시 

(2) props drilling이 발생하여 상태 변화 추적이 힘들 때
안좋은 예시는
프롭스드릴링으로 파고파다보니 나중에 얘가 t.f였는지 원래 뭐엿는지 모르게 만들고

좋은 예시는 
없는데 애초에 전역상태로 관리하면 프롭스 드릴링이 일어나지 않았을거니까 
--------------------------------------------------------------------------------
(1),(2)같이만들어야겠다 

안좋은 예시를 
처음에 만들때 부모가 몰라도 되는 드릴링을 여러번해서 상태변화를 모르게 만들자

좋은 예시는 리코일로 전역상태 관리하는 리코일로 하나 만들고 

*/
const Q3 = () => {
  return (
    <>
      {/* <ExampleA /> */}
      {/* <ExampleB /> */}
    </>
  );
};
export default Q3;
